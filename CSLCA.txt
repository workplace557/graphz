#include <stdio.h>
#include <graphics.h> // BGI graphics library
// Constants for clipping window
#define xmin 100
#define xmax 300
#define ymin 100
#define ymax 200
// Function to compute region code
int computeCode(int x, int y) {
    int code = 0;
    if (x < xmin) code |= 1; // Left
    if (x > xmax) code |= 2; // Right
    if (y < ymin) code |= 4; // Bottom
    if (y > ymax) code |= 8; // Top
    return code;
}
// Function to clip line
void clipLine(int x1, int y1, int x2, int y2) {
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);
    // Perform Cohen-Sutherland clipping
    while ((code1 | code2) != 0) {
        if ((code1 & code2) != 0) {
            // Both endpoints are outside the clipping window; trivially reject
            return;
        }
        int codeOut = (code1 != 0) ? code1 : code2;
        double x, y;
        // Calculate intersection points with the clipping window
        if (codeOut & 1) { // Left
            x = xmin;
            y = y1 + (y2 - y1) * (xmin - x1) / (x2 - x1);
        } else if (codeOut & 2) { // Right
            x = xmax;
            y = y1 + (y2 - y1) * (xmax - x1) / (x2 - x1);
        } else if (codeOut & 4) { // Bottom
            y = ymin;
            x = x1 + (x2 - x1) * (ymin - y1) / (y2 - y1);
        } else if (codeOut & 8) { // Top
            y = ymax;
            x = x1 + (x2 - x1) * (ymax - y1) / (y2 - y1);
        }
        // Update the endpoint that is outside the clipping window
        if (codeOut == code1) {
            x1 = (int)x;
            y1 = (int)y;
            code1 = computeCode(x1, y1);
        } else {
            x2 = (int)x;
            y2 = (int)y;
            code2 = computeCode(x2, y2);
        }
    }
    // Draw the clipped line segment
    line(x1, y1, x2, y2); // Assuming BGI function
}
int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\Dev-Cpp\\BGI"); // Initialize graphics window
    // Get user input for the line segment endpoints
    int x1, y1, x2, y2;
    printf("Enter x1 and y1: ");
    scanf("%d %d", &x1, &y1);
    printf("Enter x2 and y2: ");
    scanf("%d %d", &x2, &y2);
	// Example: (x1, y1) = (70, 150), (x2, y2) = (200, 160)
    // Draw the clipping window boundary
    rectangle(xmin, ymin, xmax, ymax); // Assuming BGI function
    // Clip and draw the line segment
    clipLine(x1, y1, x2, y2);
    getch(); // Wait for user input
    closegraph(); // Close graphics window
    return 0;
}